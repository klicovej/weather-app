!function(e){var t={};function n(r){if(t[r])return t[r].exports;var o=t[r]={i:r,l:!1,exports:{}};return e[r].call(o.exports,o,o.exports,n),o.l=!0,o.exports}n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var o in e)n.d(r,o,function(t){return e[t]}.bind(null,o));return r},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=0)}([function(e,t,n){"use strict";n.r(t);var r=function(e,t,n,r){return new(n||(n=Promise))((function(o,i){function s(e){try{c(r.next(e))}catch(e){i(e)}}function a(e){try{c(r.throw(e))}catch(e){i(e)}}function c(e){var t;e.done?o(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(s,a)}c((r=r.apply(e,t||[])).next())}))};class o{constructor(e,t){this._model=e,this._view=t,this._view.bindSearchCity(this.handleSearchCity.bind(this)),this._view.bindGetGeolocation(this.handleGetGeolocation.bind(this)),this._view.renderForecastsForCity(this._model.forecast.getForecastsWithHighestTempForEveryDay(),this._model.forecast.city)}handleSearchCity(e){return r(this,void 0,void 0,(function*(){this._model.cityName=e,yield this._model.initialize(),"200"===this._model.forecast.cod?this._view.renderForecastsForCity(this._model.forecast.getForecastsWithHighestTempForEveryDay(),this._model.forecast.city):(this._view.removeCityNameAndForecasts(),this._view.createErrorMessage(`Pro město s názvem '${e}' se nepodařilo najít předpověď.`))}))}handleGetGeolocation(){console.log("sem handler more")}}class i{constructor(e,t,n,r){this._temp=e,this._date=new Date(t),this._weatherDescription=n,this._windSpeed=r}get temp(){return Math.round(this._temp)}get date(){return this._date}get weatherDescription(){return this._weatherDescription}get windSpeed(){return this._windSpeed}set date(e){this._date=e}getDayName(){return new Intl.DateTimeFormat("cs-CZ",{weekday:"long"}).format(this.date)}}class s{constructor(e,t,n,r){this._name=e,this._country=t,this._sunrise=n,this._sunset=r}get name(){return this._name}get country(){return this._country}get sunrise(){return this._sunrise}get sunset(){return this._sunset}}class a{constructor(e){if(this._treeHourForecasts=new Array,this._cod=e.cod,"200"===this._cod){for(let t of e.list)this._treeHourForecasts.push(new i(t.main.temp,t.dt_txt,t.weather[0].description,t.wind.speed));this._city=new s(e.city.name,e.city.country,e.city.sunrise,e.city.sunset)}}get cod(){return this._cod}get city(){return this._city}getForecastsWithHighestTempForEveryDay(){const e=this._getForecastsWithoutHours(this._treeHourForecasts);var t;return function(e,t){let n=new Array;for(let r in e){const o=e[r].reduce((e,n)=>e[t]>n[t]?e:n);n.push(o)}return n}((t="date",e.reduce((e,n)=>{let r=n[t];return e[r]||(e[r]=[]),e[r].push(n),e},{})),"temp")}_getForecastsWithoutHours(e){return e.map(e=>(e.date=new Date(`${e.date.getFullYear()}-${e.date.getMonth()+1}-${e.date.getDate()}`),e))}}var c=function(e,t,n,r){return new(n||(n=Promise))((function(o,i){function s(e){try{c(r.next(e))}catch(e){i(e)}}function a(e){try{c(r.throw(e))}catch(e){i(e)}}function c(e){var t;e.done?o(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(s,a)}c((r=r.apply(e,t||[])).next())}))};class h{constructor(e,t,n="metric"){this._url=e,this._cityName=t,this._units=n}get forecast(){return this._forecast}set cityName(e){this._cityName=e}initialize(){return c(this,void 0,void 0,(function*(){const e=this._url.concat("&q=",this._cityName,"&units=",this._units),t=yield this.fetchForecast(e);this._forecast=new a(t)}))}fetchForecast(e){return c(this,void 0,void 0,(function*(){const t=yield fetch(e);return yield t.json()}))}}const d=document.createElement("template");d.innerHTML='\n<style>\n    h3 {\n        color: coral;\n    }  \n</style>\n<div class="weather-app__card">\n    <h2><slot name="day" /></h2>\n    <h3><slot name="temp"/></h3>\n    <h3><slot name="description"/><</h3>\n    <h3><slot name="wind"/><</h3>\n</div>\n';class u extends HTMLElement{constructor(){super(),this.attachShadow({mode:"open"}),this.shadowRoot.appendChild(d.content.cloneNode(!0))}}const l=document.createElement("template");l.innerHTML='\n  <form id="search-form">\n      <input type="text" placeholder="Název hledaného města">\n      <button type="submit">Hledat</button>\n      <button id="location">Geo lokace</button>\n  </form>\n';class p extends HTMLElement{constructor(){super(),this.attachShadow({mode:"open"}),this.shadowRoot.appendChild(l.content.cloneNode(!0)),this._input=this.shadowRoot.querySelector("input")}connectedCallback(){this.shadowRoot.getElementById("location").addEventListener("click",e=>{e.preventDefault(),this.dispatchEvent(new CustomEvent("getGeolocation"))}),this.shadowRoot.getElementById("search-form").addEventListener("submit",e=>{e.preventDefault();const t=this._input.value;""===t?this.dispatchEvent(new CustomEvent("emptyInput")):this.dispatchEvent(new CustomEvent("searchSubmit",{detail:t}))})}}const m=document.createElement("template");m.innerHTML='\n<div>\n    <weather-app-search></weather-app-search>\n    <h3><slot name="errorMessage"></slot></h3>\n    <h1><slot name="city"></slot></h1>\n    <div class="weather-app__cards">\n      <slot name="weather-app-card"></slot>\n    </div>\n</div>\n';class w extends HTMLElement{constructor(){super(),this.attachShadow({mode:"open"}),this.shadowRoot.appendChild(m.content.cloneNode(!0)),this._weatherAppSearch=this.shadowRoot.querySelector("weather-app-search")}connectedCallback(){this._weatherAppSearch.addEventListener("emptyInput",e=>{this.dispatchEvent(new CustomEvent("emptyInput",{detail:"Vyplň název města bráško."}))}),this._weatherAppSearch.addEventListener("searchSubmit",e=>{this.dispatchEvent(new CustomEvent("searchSubmit",{detail:e.detail}))}),this._weatherAppSearch.addEventListener("getGeolocation",e=>{this.dispatchEvent(new CustomEvent("getGeolocation"))})}}class _{constructor(){window.customElements.define("weather-app",w),window.customElements.define("weather-app-search",p),window.customElements.define("weather-app-card",u),this._weatherApp=document.createElement("weather-app"),document.getElementsByTagName("body")[0].append(this._weatherApp),this._weatherApp.addEventListener("emptyInput",e=>{this.removeCityNameAndForecasts(),this.createErrorMessage(e.detail)})}renderForecastsForCity(e,t){this.removeCityNameAndForecasts();const n=this._createTextNodeSetSlotAndInnerHTML("city",""+t.name);this._weatherApp.appendChild(n),this._createWeatherAppCards(e)}removeCityNameAndForecasts(){for(;this._weatherApp.firstChild;)this._weatherApp.removeChild(this._weatherApp.firstChild)}createErrorMessage(e){const t=this._createTextNodeSetSlotAndInnerHTML("errorMessage",e);this._weatherApp.appendChild(t)}_createWeatherAppCards(e){e.forEach(e=>{const t=document.createElement("weather-app-card");t.setAttribute("slot","weather-app-card");const n=this._createTextNodeSetSlotAndInnerHTML("day",e.getDayName()),r=this._createTextNodeSetSlotAndInnerHTML("temp",""+e.temp),o=this._createTextNodeSetSlotAndInnerHTML("description",""+e.weatherDescription),i=this._createTextNodeSetSlotAndInnerHTML("wind",""+e.windSpeed);t.append(n,r,o,i),this._weatherApp.appendChild(t)})}_createTextNodeSetSlotAndInnerHTML(e,t){const n=document.createElement("textNode");return n.setAttribute("slot",e),n.innerHTML=t,n}bindSearchCity(e){this._weatherApp.addEventListener("searchSubmit",t=>{e(t.detail)})}bindGetGeolocation(e){this._weatherApp.addEventListener("getGeolocation",t=>{e()})}}var f=function(e,t,n,r){return new(n||(n=Promise))((function(o,i){function s(e){try{c(r.next(e))}catch(e){i(e)}}function a(e){try{c(r.throw(e))}catch(e){i(e)}}function c(e){var t;e.done?o(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(s,a)}c((r=r.apply(e,t||[])).next())}))};!function(e){f(this,void 0,void 0,(function*(){const t=new h(e,"Tovačov");yield t.initialize();new o(t,new _)}))}("https://api.openweathermap.org/data/2.5/forecast?&appid=4a710277b41d7da791e44bf515bac6f7&lang=CZ")}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,