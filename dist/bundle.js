!function(t){var e={};function n(i){if(e[i])return e[i].exports;var o=e[i]={i:i,l:!1,exports:{}};return t[i].call(o.exports,o,o.exports,n),o.l=!0,o.exports}n.m=t,n.c=e,n.d=function(t,e,i){n.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:i})},n.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},n.t=function(t,e){if(1&e&&(t=n(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var i=Object.create(null);if(n.r(i),Object.defineProperty(i,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var o in t)n.d(i,o,function(e){return t[e]}.bind(null,o));return i},n.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return n.d(e,"a",e),e},n.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},n.p="",n(n.s=0)}([function(t,e,n){"use strict";n.r(e);var i=function(t,e,n,i){return new(n||(n=Promise))((function(o,r){function s(t){try{c(i.next(t))}catch(t){r(t)}}function a(t){try{c(i.throw(t))}catch(t){r(t)}}function c(t){var e;t.done?o(t.value):(e=t.value,e instanceof n?e:new n((function(t){t(e)}))).then(s,a)}c((i=i.apply(t,e||[])).next())}))};class o{constructor(t,e){this._model=t,this._view=e,this._view.bindSearchCity(this.handleSearchCity.bind(this)),this._view.bindGetGeolocation(this.handleGetGeolocation.bind(this)),this._view.renderForecastsForCity(this._model.forecast.getForecastsWithHighestTempForEveryDay(),this._model.forecast.city)}handleSearchCity(t){return i(this,void 0,void 0,(function*(){this._model.cityName=t,yield this._model.initialize(),this._checkForecastStatusAndRenderUI(t)}))}handleGetGeolocation(){navigator.geolocation?navigator.geolocation.getCurrentPosition(this._success.bind(this),this._error.bind(this)):(this._view.removeCityNameAndForecasts(),this._view.createErrorMessage("Ve vašem prohlížeči není zjištění aktuální polohy podporováno."))}_success(t){return i(this,void 0,void 0,(function*(){this._model.latitude=t.coords.latitude,this._model.longitude=t.coords.longitude,yield this._model.initialize(!1),this._checkForecastStatusAndRenderUI()}))}_error(){this._view.removeCityNameAndForecasts(),this._view.createErrorMessage("Pro vaši aktuální polohu se nepodařilo najít předpověď.")}_checkForecastStatusAndRenderUI(t=""){"200"===this._model.forecast.cod?this._view.renderForecastsForCity(this._model.forecast.getForecastsWithHighestTempForEveryDay(),this._model.forecast.city):(this._view.removeCityNameAndForecasts(),this._view.createErrorMessage(`Pro město s názvem '${t}' se nepodařilo najít předpověď.`))}}class r{constructor(t,e,n,i){this._temp=t,this._date=new Date(e),this._weatherDescription=n,this._windSpeed=i}get temp(){return Math.round(this._temp)}get date(){return this._date}get weatherDescription(){return this._weatherDescription}get windSpeed(){return this._windSpeed}set date(t){this._date=t}getDayName(){return new Intl.DateTimeFormat("cs-CZ",{weekday:"long"}).format(this.date)}}class s{constructor(t,e,n,i){this._name=t,this._country=e,this._sunrise=n,this._sunset=i}get name(){return this._name}get country(){return this._country}get sunrise(){return this._sunrise}get sunset(){return this._sunset}}class a{constructor(t){if(this._treeHourForecasts=new Array,this._cod=t.cod,"200"===this._cod){for(let e of t.list)this._treeHourForecasts.push(new r(e.main.temp,e.dt_txt,e.weather[0].description,e.wind.speed));this._city=new s(t.city.name,t.city.country,t.city.sunrise,t.city.sunset)}}get cod(){return this._cod}get city(){return this._city}getForecastsWithHighestTempForEveryDay(){const t=this._getForecastsWithoutHours(this._treeHourForecasts);var e;return function(t,e){let n=new Array;for(let i in t){const o=t[i].reduce((t,n)=>t[e]>n[e]?t:n);n.push(o)}return n}((e="date",t.reduce((t,n)=>{let i=n[e];return t[i]||(t[i]=[]),t[i].push(n),t},{})),"temp")}_getForecastsWithoutHours(t){return t.map(t=>(t.date=new Date(`${t.date.getFullYear()}-${t.date.getMonth()+1}-${t.date.getDate()}`),t))}}var c=function(t,e,n,i){return new(n||(n=Promise))((function(o,r){function s(t){try{c(i.next(t))}catch(t){r(t)}}function a(t){try{c(i.throw(t))}catch(t){r(t)}}function c(t){var e;t.done?o(t.value):(e=t.value,e instanceof n?e:new n((function(t){t(e)}))).then(s,a)}c((i=i.apply(t,e||[])).next())}))};class h{constructor(t,e,n="metric"){this._url=t,this._cityName=e,this._units=n}get forecast(){return this._forecast}set cityName(t){this._cityName=t}set latitude(t){this._latitude=t}set longitude(t){this._longitude=t}initialize(t=!0){return c(this,void 0,void 0,(function*(){let e="";e=t?this._url.concat("&q=",this._cityName,"&units=",this._units):this._url.concat("&lat=",this._latitude,"&lon=",this._longitude,"&units=",this._units);const n=yield this.fetchForecast(e);this._forecast=new a(n)}))}fetchForecast(t){return c(this,void 0,void 0,(function*(){const e=yield fetch(t);return yield e.json()}))}}const d=document.createElement("template");d.innerHTML='\n<style>\n    h3 {\n        color: coral;\n    }  \n</style>\n<div class="weather-app__card">\n    <h2><slot name="day" /></h2>\n    <h3><slot name="temp"/></h3>\n    <h3><slot name="description"/><</h3>\n    <h3><slot name="wind"/><</h3>\n</div>\n';class u extends HTMLElement{constructor(){super(),this.attachShadow({mode:"open"}),this.shadowRoot.appendChild(d.content.cloneNode(!0))}}const l=document.createElement("template");l.innerHTML='\n  <form id="search-form">\n      <input type="text" placeholder="Název hledaného města">\n      <button type="submit">Hledat</button>\n      <button id="location">Geo lokace</button>\n  </form>\n';class p extends HTMLElement{constructor(){super(),this.attachShadow({mode:"open"}),this.shadowRoot.appendChild(l.content.cloneNode(!0)),this._input=this.shadowRoot.querySelector("input")}connectedCallback(){this.shadowRoot.getElementById("location").addEventListener("click",t=>{t.preventDefault(),this.dispatchEvent(new CustomEvent("getGeolocation"))}),this.shadowRoot.getElementById("search-form").addEventListener("submit",t=>{t.preventDefault();const e=this._input.value;""===e?this.dispatchEvent(new CustomEvent("emptyInput")):this.dispatchEvent(new CustomEvent("searchSubmit",{detail:e}))})}}const m=document.createElement("template");m.innerHTML='\n<div>\n    <weather-app-search></weather-app-search>\n    <h3><slot name="errorMessage"></slot></h3>\n    <h1><slot name="city"></slot></h1>\n    <div class="weather-app__cards">\n      <slot name="weather-app-card"></slot>\n    </div>\n</div>\n';class _ extends HTMLElement{constructor(){super(),this.attachShadow({mode:"open"}),this.shadowRoot.appendChild(m.content.cloneNode(!0)),this._weatherAppSearch=this.shadowRoot.querySelector("weather-app-search")}connectedCallback(){this._weatherAppSearch.addEventListener("emptyInput",t=>{this.dispatchEvent(new CustomEvent("emptyInput",{detail:"Vyplň název města bráško."}))}),this._weatherAppSearch.addEventListener("searchSubmit",t=>{this.dispatchEvent(new CustomEvent("searchSubmit",{detail:t.detail}))}),this._weatherAppSearch.addEventListener("getGeolocation",t=>{this.dispatchEvent(new CustomEvent("getGeolocation"))})}}class w{constructor(){window.customElements.define("weather-app",_),window.customElements.define("weather-app-search",p),window.customElements.define("weather-app-card",u),this._weatherApp=document.createElement("weather-app"),document.getElementsByTagName("body")[0].append(this._weatherApp),this._weatherApp.addEventListener("emptyInput",t=>{this.removeCityNameAndForecasts(),this.createErrorMessage(t.detail)})}renderForecastsForCity(t,e){this.removeCityNameAndForecasts();const n=this._createTextNodeSetSlotAndInnerHTML("city",""+e.name);this._weatherApp.appendChild(n),this._createWeatherAppCards(t)}removeCityNameAndForecasts(){for(;this._weatherApp.firstChild;)this._weatherApp.removeChild(this._weatherApp.firstChild)}createErrorMessage(t){const e=this._createTextNodeSetSlotAndInnerHTML("errorMessage",t);this._weatherApp.appendChild(e)}_createWeatherAppCards(t){t.forEach(t=>{const e=document.createElement("weather-app-card");e.setAttribute("slot","weather-app-card");const n=this._createTextNodeSetSlotAndInnerHTML("day",t.getDayName()),i=this._createTextNodeSetSlotAndInnerHTML("temp",""+t.temp),o=this._createTextNodeSetSlotAndInnerHTML("description",""+t.weatherDescription),r=this._createTextNodeSetSlotAndInnerHTML("wind",""+t.windSpeed);e.append(n,i,o,r),this._weatherApp.appendChild(e)})}_createTextNodeSetSlotAndInnerHTML(t,e){const n=document.createElement("textNode");return n.setAttribute("slot",t),n.innerHTML=e,n}bindSearchCity(t){this._weatherApp.addEventListener("searchSubmit",e=>{t(e.detail)})}bindGetGeolocation(t){this._weatherApp.addEventListener("getGeolocation",e=>{t()})}}var v=function(t,e,n,i){return new(n||(n=Promise))((function(o,r){function s(t){try{c(i.next(t))}catch(t){r(t)}}function a(t){try{c(i.throw(t))}catch(t){r(t)}}function c(t){var e;t.done?o(t.value):(e=t.value,e instanceof n?e:new n((function(t){t(e)}))).then(s,a)}c((i=i.apply(t,e||[])).next())}))};!function(t){v(this,void 0,void 0,(function*(){const e=new h(t,"Tovačov");yield e.initialize();new o(e,new w)}))}("https://api.openweathermap.org/data/2.5/forecast?&appid=4a710277b41d7da791e44bf515bac6f7&lang=CZ")}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,